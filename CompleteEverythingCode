 package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import org.firstinspires.ftc.teamcode.HardwareFile2024;


/*
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */



@TeleOp(name="Test", group="Linear OpMode")

public class CompleteEverythingCode extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private CRServo servo1;
    private CRServo servo2;
    private CRServo servo3;
    private DcMotor motor0;
    private DcMotor motor1;
    private DcMotor motor2;
    private DcMotor motor3;
    
    private TouchSensor brushExtended;
    private TouchSensor brushRetracted;
    private boolean brushMoving = false;
    public DcMotor screwLift = null; //Motors for the archimedes screw
    public DcMotor screwTurn = null;


    public void checkEverything() {
        if (brushExtended.isPressed() && brushMoving) {
            brushMoving = false;
            servo1.setPower(0.5);
            servo2.setPower(0.5);
        } else if (brushRetracted.isPressed() && brushMoving) {
            brushMoving = false;
            servo1.setPower(0.5);
            servo2.setPower(0.5);
        } else {
            brushMoving = true;
        }
    }
    
    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        
    
        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        
        servo1 = hardwareMap.get(CRServo.class, "left_servo");
        servo2 = hardwareMap.get(CRServo.class, "right_servo");
        servo3 = hardwareMap.get(CRServo.class, "fingers_servo");
        motor1 = hardwareMap.get(DcMotor.class, "archimedes");
        motor0 = hardwareMap.get(DcMotor.class, "motor0");
        motor3 = hardwareMap.get(DcMotor.class, "motor3");
        motor2 = hardwareMap.get(DcMotor.class, "arch_up");
        brushExtended      = hardwareMap.get(TouchSensor.class, "touchSensor1");
        brushRetracted     = hardwareMap.get(TouchSensor.class, "touchSensor2");
        
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        //change motor 2 direction
        //motor2.setDirection(DcMotor.Direction.REVERSE);
        
        // Wait for the game to start (driver presses START)
        waitForStart();
        runtime.reset();
        // run until the end of the match (driver presses STOP)
            while (opModeIsActive()) {
            if (gamepad1.a) {
                servo1.setPower(0.5);
                servo2.setPower(-0.5);
                telemetry.addData("A",  "TRUE");
            }else if (gamepad1.b) {
                servo1.setPower(-0.5);
                servo2.setPower(0.5);
                telemetry.addData("B",  "TRUE");
            }
else {
                servo1.setPower(0.0);
                servo2.setPower(0.0);
            }
             if (brushExtended.isPressed() == true) {
                servo1.setPower(0.0);
                servo2.setPower(0.0);
                telemetry.addData("BrushExtended",  "TRUE");
             }else {} 
            if  (brushRetracted.isPressed() == true) {
                servo1.setPower(0.0);
                servo2.setPower(0.0);
                telemetry.addData("BrushRetracted", "TRUE" );
            }else {}
                telemetry.addData("Status", "RUNNING");
                telemetry.update();
             
            if (gamepad1.dpad_up) {
                motor1.setPower (0.5);
                telemetry.addData("Y",  "TRUE");
            } 
            else if (gamepad1.dpad_down) {
                motor1.setPower (-0.5);
                telemetry.addData("X",  "TRUE");
            } if (gamepad1.y) {
                motor0.setPower (0.5);
                motor3.setPower (0.5);
                telemetry.addData("",  "TRUE");
            } else if (gamepad1.x) {
                motor0.setPower (-0.5);
                motor3.setPower (-0.5);
                telemetry.addData("X",  "TRUE");
            } 

            // if (gamepad1.dpadup) {
            // motor4.setPower (0.5);
            // } else if (gamepad1.dpadright) {
            // motor4.setPower (-0.5);
            //}
        HardwareFile2024 robot = new HardwareFile2024(this);
        robot.init();
        waitForStart();
        //runtime.reset();
        
        double axial;
        double strafe;
        double rotation;
        
        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
          
            // POV Mode uses left joystick to go forward & strafe, and right joystick to rotate.
            axial    =   -gamepad1.left_stick_y;  // Note: pushing stick forward gives negative value - Forward and Backward 
            strafe   =   gamepad1.left_stick_x;  // Strafe - Left and Right - taking move right as positive
            rotation =   gamepad1.right_stick_x;  // Rotation - ClockWise and CounterClockWise - taking turn right as positive
            
            robot.driveRobot(axial, strafe, rotation);
          
        }
}
}
}

